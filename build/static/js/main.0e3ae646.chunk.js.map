{"version":3,"sources":["components/Counter.js","index.js"],"names":["Counter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addOne","setState","count","state","reset","window","confirm","react_default","a","createElement","className","onClick","Component","ReactDOM","render","components_Counter","document","getElementById"],"mappings":"oMAqCeA,cAjCX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAgBPI,OAAS,WACRP,EAAKQ,SAAS,CACbC,MAAOT,EAAKU,MAAMD,MAAQ,KAnBZT,EAuBbW,MAAQ,WACWC,OAAOC,QAAQ,0BAE1Bb,EAAKQ,SAAS,CACVC,MAAO,KAzBfT,EAAKU,MAAQ,CACTD,MAAO,GAHFT,wEAOf,OACCc,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aACPH,EAAAC,EAAAC,cAAA,UAAKb,KAAKO,MAAMD,OAChBK,EAAAC,EAAAC,cAAA,UAAQE,QAASf,KAAKI,QAAtB,KACAO,EAAAC,EAAAC,cAAA,UAAQE,QAASf,KAAKQ,OAAtB,iBAZUQ,aCEtBC,IAASC,OAAOP,EAAAC,EAAAC,cAACM,EAAD,MAAaC,SAASC,eAAe","file":"static/js/main.0e3ae646.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n// import './Counter.css';\r\n\r\nclass Counter extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        };\r\n    }\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className= \"plusCount\">\r\n            <h1>{this.state.count}</h1>\r\n            <button onClick={this.addOne}>+</button>\r\n            <button onClick={this.reset}>reset</button>\r\n            </div>\r\n            \r\n\t\t);\r\n    }\r\n\r\n\taddOne = () => {\r\n\t\tthis.setState({\r\n\t\t\tcount: this.state.count + 1\r\n\t\t});\r\n    };\r\n\r\n    reset = () => {\r\n        var pressYes = window.confirm(\"Do you want to reset?\");\r\n        if(pressYes){\r\n            this.setState({\r\n                count: 0\r\n            });\r\n        }\r\n\t}\r\n}\r\n\r\nexport default Counter;\r\n\r\n\r\n// import React, { Component } from 'react';\r\n// //import 'Counter.css';\r\n\r\n// class Counter extends Component {\r\n// \tconstructor() {\r\n// \t\tsuper();\r\n// \t\tthis.state = {\r\n// \t\t\tcolor: 0\r\n// \t\t}\r\n// \t}\r\n\r\n// \trender() {\r\n// \t\tvar colors = [\"red\", \"green\", \"purple\", \"yellow\", \"blue\"];\r\n// \t\treturn (\r\n// \t\t\t<p onClick={this.changeColor}>Hello {this.props.person} and my color is {colors[this.state.color]}</p>\r\n// \t\t);\r\n// \t}\r\n\r\n// \tchangeColor = () => {\r\n// \t\tthis.setState({\r\n// \t\t\tcolor: Math.floor(Math.random() * 5)\r\n// \t\t});\r\n// \t}\r\n// }\r\n\r\n// export default Counter;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Counter from './components/Counter';\n\nReactDOM.render(<Counter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}